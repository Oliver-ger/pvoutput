{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"pvoutput PVOutput.org python API module. Works with the R2 API version spec here . Get your API key from the account page on PVOutput Example usage Here's a quick code example: from pvoutput import PVOutput import json apikey = 'aaaaaabbbbbbccccccddddddeeeeeeffffffgggg' systemid = 12345 pvo = PVOutput(apikey=apikey, systemid=systemid) print(json.dumps(pvo.check_rate_limit(), indent=2)) Will give you output like this: { \"X-Rate-Limit-Remaining\": \"271\", \"X-Rate-Limit-Limit\": \"300\", \"X-Rate-Limit-Reset\": \"1570597200\" } There are more example code snippets in the examples directory. Installing Prod-ish usage python -m pip install pvoutput to install from pypi Dev Install Things python -m venv venv source venv/bin/activate python -m pip install --upgrade pip flit python -m flit install Input validation This is handled by the pvoutput.base.PVOutputBase.validate_data function. It expects the input data and a dict of configuration parameters, which are described in the table below: Field name Required Valid Types Description type Yes Any This is a python type object to match against the field type. required No bool This defines if the field is required. description No Any This is currently unused, but typically holds the description from the PVOutput API Docs donation_required No bool If set to true, and the user's not donated, it'll throw a DonationRequired exception if the user tries to use functionality that requires them to have donated. It's a whole thing. maxlen No int Maximum length of the field. ie. if len(field) > maxlen: raise ValueError maxval No int Maximum value of the field. minval No int Minimum value of the field. additional_validators No List[function] A list of functions to run against the field, which should throw exceptions if something's wrong. An example configuration \"date_val\": { \"required\": True, \"description\": \"Date\", \"type\": date, \"donation_required\": False, \"additional_validators\" : [ validate_delete_status_date ] } Contributing / Testing pylint , black and mypy should all pass before submitting a PR. License MIT License (see LICENSE ), don't use this for anything you care about - I don't provide a warranty at all, and it'll likely steal your socks and underfeed your dog. Changelog 0.0.1 Initial version 0.0.2 2019-10-12 Fixed some bugs 0.0.3 2019-10-13 Added PVOutput.getstatus() which returns the current status as a dict 0.0.4 2019-11-05 Code cleanup using sonarqube, added an error check for registernotification 0.0.5 Asyncio things 0.0.6 I broke the build when uploading to pypi, fixed in 0.0.7. 0.0.7 2021-12-27 #117 fix for getstatus issues 0.0.8 2022-01-02 @cheops did great work cleaning up a lot of my mess, and testing is much better.","title":"Home"},{"location":"#pvoutput","text":"PVOutput.org python API module. Works with the R2 API version spec here . Get your API key from the account page on PVOutput","title":"pvoutput"},{"location":"#example-usage","text":"Here's a quick code example: from pvoutput import PVOutput import json apikey = 'aaaaaabbbbbbccccccddddddeeeeeeffffffgggg' systemid = 12345 pvo = PVOutput(apikey=apikey, systemid=systemid) print(json.dumps(pvo.check_rate_limit(), indent=2)) Will give you output like this: { \"X-Rate-Limit-Remaining\": \"271\", \"X-Rate-Limit-Limit\": \"300\", \"X-Rate-Limit-Reset\": \"1570597200\" } There are more example code snippets in the examples directory.","title":"Example usage"},{"location":"#installing","text":"","title":"Installing"},{"location":"#prod-ish-usage","text":"python -m pip install pvoutput to install from pypi","title":"Prod-ish usage"},{"location":"#dev-install-things","text":"python -m venv venv source venv/bin/activate python -m pip install --upgrade pip flit python -m flit install","title":"Dev Install Things"},{"location":"#input-validation","text":"This is handled by the pvoutput.base.PVOutputBase.validate_data function. It expects the input data and a dict of configuration parameters, which are described in the table below: Field name Required Valid Types Description type Yes Any This is a python type object to match against the field type. required No bool This defines if the field is required. description No Any This is currently unused, but typically holds the description from the PVOutput API Docs donation_required No bool If set to true, and the user's not donated, it'll throw a DonationRequired exception if the user tries to use functionality that requires them to have donated. It's a whole thing. maxlen No int Maximum length of the field. ie. if len(field) > maxlen: raise ValueError maxval No int Maximum value of the field. minval No int Minimum value of the field. additional_validators No List[function] A list of functions to run against the field, which should throw exceptions if something's wrong. An example configuration \"date_val\": { \"required\": True, \"description\": \"Date\", \"type\": date, \"donation_required\": False, \"additional_validators\" : [ validate_delete_status_date ] }","title":"Input validation"},{"location":"#contributing-testing","text":"pylint , black and mypy should all pass before submitting a PR.","title":"Contributing / Testing"},{"location":"#license","text":"MIT License (see LICENSE ), don't use this for anything you care about - I don't provide a warranty at all, and it'll likely steal your socks and underfeed your dog.","title":"License"},{"location":"#changelog","text":"0.0.1 Initial version 0.0.2 2019-10-12 Fixed some bugs 0.0.3 2019-10-13 Added PVOutput.getstatus() which returns the current status as a dict 0.0.4 2019-11-05 Code cleanup using sonarqube, added an error check for registernotification 0.0.5 Asyncio things 0.0.6 I broke the build when uploading to pypi, fixed in 0.0.7. 0.0.7 2021-12-27 #117 fix for getstatus issues 0.0.8 2022-01-02 @cheops did great work cleaning up a lot of my mess, and testing is much better.","title":"Changelog"},{"location":"api/","text":"Interface to the PVOutput API PVOutput ( PVOutputBase ) This class provides an interface to the pvoutput.org API Source code in pvoutput/__init__.py class PVOutput ( PVOutputBase ): \"\"\"This class provides an interface to the pvoutput.org API\"\"\" # pylint: disable=too-many-arguments def __init__ ( self , apikey : str , systemid : int , donation_made : bool = False , stats_period : int = 5 , session : Optional [ requests . Session ] = None , ): \"\"\"Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool \"\"\" super () . __init__ ( apikey = apikey , systemid = systemid , donation_made = donation_made , stats_period = stats_period , ) self . session = session if session is None : self . session = requests . Session () def _call ( self , endpoint : str , method : str = \"POST\" , ** kwargs : Dict [ str , Any ], ) -> requests . Response : \"\"\"Makes a call to a URL endpoint with the data/headers/method you require. :param endpoint: The URL to call :type endpoint: str :param data: Data to send :type data: dict :param headers: Additional headers, if unset it'll use self._headers() which is the standard API key / systemid set (eg, self.check_rate_limit) :type headers: dict :param method: specify a method if you want to use something other than POST :type method: str :returns: The response object :rtype: requests.Response :raises TypeError: if the data you pass is of the wrong format. :raises ValueError: if the call throws a HTTP 400 error. :raises requests.exception: if method throws an exception. \"\"\" self . validate_data ( kwargs , CALL_PARAMETERS ) if method == \"GET\" : response = requests . get ( endpoint , data = kwargs . get ( \"data\" ), headers = kwargs . get ( \"headers\" , self . _headers ()), params = kwargs . get ( \"params\" ), ) elif method == \"POST\" : response = requests . post ( endpoint , data = kwargs . get ( \"data\" ), headers = kwargs . get ( \"headers\" , self . _headers ()), ) else : raise UnknownMethodError ( f \"unknown method { kwargs [ 'method' ] } \" ) if response . status_code == 400 : # TODO: work out how to get the specific response and provide useful answers raise ValueError ( f \"HTTP400: { response . text . strip () } \" ) # likely errors - https://pvoutput.org/help/api_specification.html#error-messages response . raise_for_status () return response def check_rate_limit ( self ) -> Dict [ str , str ]: \"\"\"Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict \"\"\" headers = self . _headers () headers [ \"X-Rate-Limit\" ] = \"1\" url , method = utils . URLS [ \"getsystem\" ] response = self . _call ( endpoint = url , params = {}, headers = headers , method = method ) retval = utils . get_rate_limit_header ( response ) return retval def addstatus ( self , data : Dict [ str , Any ], ) -> requests . Response : \"\"\"The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: requests.Response \"\"\" # if you don't set a time, set it to now # can't push this through the validator as it relies on the class config if \"t\" not in data : data [ \"t\" ] = self . get_time_by_base () self . validate_data ( data , ADDSTATUS_PARAMETERS ) url , method = utils . URLS [ \"addstatus\" ] return self . _call ( endpoint = url , data = data , method = method ) def addoutput ( self , data : Dict [ str , Any ], ) -> requests . Response : \"\"\"The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: requests.Response \"\"\" self . validate_data ( data , ADDOUTPUT_PARAMETERS ) url , method = utils . URLS [ \"addoutput\" ] return self . _call ( endpoint = url , data = data , method = method ) def delete_status ( self , date_val : datetime . date , time_val : Optional [ datetime . time ] = None ) -> requests . Response : \"\"\" Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: requests.Response \"\"\" self . validate_data ( { \"date_val\" : date_val , \"time_val\" : time_val , }, DELETESTATUS_PARAMETERS , ) data = { \"d\" : date_val . strftime ( \"%Y%m %d \" )} if time_val is not None : data [ \"t\" ] = time_val . strftime ( \"%H:%M\" ) url , method = utils . URLS [ \"deletestatus\" ] return self . _call ( endpoint = url , data = data , method = method ) def getstatus ( self ) -> Dict [ str , Any ]: \"\"\"The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict \"\"\" # TODO: extend this, you can do history searches and all sorts with this endpoint params = {} if self . donation_made : params [ \"ext\" ] = 1 params [ \"sid\" ] = self . systemid url , method = utils . URLS [ \"getstatus\" ] response = self . _call ( endpoint = url , params = params , method = method ) response . raise_for_status () # grab all the things responsedata , extras = utils . responsedata_to_response ( response . text . split ( \",\" )) # if we're fancy, we get more data if extras : for i in range ( 1 , 7 ): responsedata [ f \"v { i + 6 } \" ] = ( None if extras [ i - 1 ] == \"NaN\" else float ( extras [ i - 1 ]) ) return responsedata def register_notification ( self , appid : str , url : str , alerttype : int ) -> requests . Response : \"\"\"The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"url\" : url , \"alerttype\" : alerttype , }, REGISTER_NOTIFICATION_PARAMETERS , ) call_url , method = utils . URLS [ \"registernotification\" ] params = { \"appid\" : appid , \"type\" : alerttype , \"url\" : url } return self . _call ( endpoint = call_url , params = params , method = method ) def deregister_notification ( self , appid : str , alerttype : int ) -> requests . Response : \"\"\"The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"alerttype\" : alerttype , }, DELETE_NOTIFICATION_PARAMETERS , ) url , method = utils . URLS [ \"deregisternotification\" ] params = { \"appid\" : appid , \"type\" : alerttype } return self . _call ( endpoint = url , params = params , method = method ) __init__ ( self , apikey , systemid , donation_made = False , stats_period = 5 , session = None ) special Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool Source code in pvoutput/__init__.py def __init__ ( self , apikey : str , systemid : int , donation_made : bool = False , stats_period : int = 5 , session : Optional [ requests . Session ] = None , ): \"\"\"Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool \"\"\" super () . __init__ ( apikey = apikey , systemid = systemid , donation_made = donation_made , stats_period = stats_period , ) self . session = session if session is None : self . session = requests . Session () addoutput ( self , data ) The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: requests.Response Source code in pvoutput/__init__.py def addoutput ( self , data : Dict [ str , Any ], ) -> requests . Response : \"\"\"The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: requests.Response \"\"\" self . validate_data ( data , ADDOUTPUT_PARAMETERS ) url , method = utils . URLS [ \"addoutput\" ] return self . _call ( endpoint = url , data = data , method = method ) addstatus ( self , data ) The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: requests.Response Source code in pvoutput/__init__.py def addstatus ( self , data : Dict [ str , Any ], ) -> requests . Response : \"\"\"The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: requests.Response \"\"\" # if you don't set a time, set it to now # can't push this through the validator as it relies on the class config if \"t\" not in data : data [ \"t\" ] = self . get_time_by_base () self . validate_data ( data , ADDSTATUS_PARAMETERS ) url , method = utils . URLS [ \"addstatus\" ] return self . _call ( endpoint = url , data = data , method = method ) check_rate_limit ( self ) Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict Source code in pvoutput/__init__.py def check_rate_limit ( self ) -> Dict [ str , str ]: \"\"\"Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict \"\"\" headers = self . _headers () headers [ \"X-Rate-Limit\" ] = \"1\" url , method = utils . URLS [ \"getsystem\" ] response = self . _call ( endpoint = url , params = {}, headers = headers , method = method ) retval = utils . get_rate_limit_header ( response ) return retval delete_status ( self , date_val , time_val = None ) Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: requests.Response Source code in pvoutput/__init__.py def delete_status ( self , date_val : datetime . date , time_val : Optional [ datetime . time ] = None ) -> requests . Response : \"\"\" Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: requests.Response \"\"\" self . validate_data ( { \"date_val\" : date_val , \"time_val\" : time_val , }, DELETESTATUS_PARAMETERS , ) data = { \"d\" : date_val . strftime ( \"%Y%m %d \" )} if time_val is not None : data [ \"t\" ] = time_val . strftime ( \"%H:%M\" ) url , method = utils . URLS [ \"deletestatus\" ] return self . _call ( endpoint = url , data = data , method = method ) deregister_notification ( self , appid , alerttype ) The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== Source code in pvoutput/__init__.py def deregister_notification ( self , appid : str , alerttype : int ) -> requests . Response : \"\"\"The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"alerttype\" : alerttype , }, DELETE_NOTIFICATION_PARAMETERS , ) url , method = utils . URLS [ \"deregisternotification\" ] params = { \"appid\" : appid , \"type\" : alerttype } return self . _call ( endpoint = url , params = params , method = method ) getstatus ( self ) The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict Source code in pvoutput/__init__.py def getstatus ( self ) -> Dict [ str , Any ]: \"\"\"The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict \"\"\" # TODO: extend this, you can do history searches and all sorts with this endpoint params = {} if self . donation_made : params [ \"ext\" ] = 1 params [ \"sid\" ] = self . systemid url , method = utils . URLS [ \"getstatus\" ] response = self . _call ( endpoint = url , params = params , method = method ) response . raise_for_status () # grab all the things responsedata , extras = utils . responsedata_to_response ( response . text . split ( \",\" )) # if we're fancy, we get more data if extras : for i in range ( 1 , 7 ): responsedata [ f \"v { i + 6 } \" ] = ( None if extras [ i - 1 ] == \"NaN\" else float ( extras [ i - 1 ]) ) return responsedata register_notification ( self , appid , url , alerttype ) The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== Source code in pvoutput/__init__.py def register_notification ( self , appid : str , url : str , alerttype : int ) -> requests . Response : \"\"\"The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"url\" : url , \"alerttype\" : alerttype , }, REGISTER_NOTIFICATION_PARAMETERS , ) call_url , method = utils . URLS [ \"registernotification\" ] params = { \"appid\" : appid , \"type\" : alerttype , \"url\" : url } return self . _call ( endpoint = call_url , params = params , method = method ) asyncio special AsyncIO interface to the PVOutput API PVOutput ( PVOutputBase ) This class provides an interface to the pvoutput.org API Source code in pvoutput/asyncio/__init__.py class PVOutput ( PVOutputBase ): \"\"\"This class provides an interface to the pvoutput.org API\"\"\" # pylint: disable=too-many-arguments def __init__ ( self , apikey : str , systemid : int , donation_made : bool = False , stats_period : int = 5 , session : Optional [ aiohttp . ClientSession ] = None , ) -> None : \"\"\"Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool \"\"\" super () . __init__ ( apikey = apikey , systemid = systemid , donation_made = donation_made , stats_period = stats_period , ) if session is None : self . session = aiohttp . ClientSession () else : self . session = session async def _call ( self , endpoint : str , method : str = \"POST\" , ** kwargs : Dict [ str , Any ], ) -> aiohttp . ClientResponse : \"\"\"Makes a call to a URL endpoint with the data/headers/method you require. :param endpoint: The URL to call :type endpoint: str :param data: Data to send :type data: dict :param headers: Additional headers, if unset it'll use self._headers() which is the standard API key / systemid set (eg, self.check_rate_limit) :type headers: dict :param method: specify a method if you want to use something other than POST :type method: str :returns: The response object :rtype: aiohttp.ClientResponse :raises TypeError: if the data you pass is of the wrong format. :raises ValueError: if the call throws a HTTP 400 error. :raises requests.exception: if method throws an exception. \"\"\" self . validate_data ( kwargs , CALL_PARAMETERS ) if method == \"GET\" : response = await self . session . get ( url = endpoint , data = kwargs . get ( \"data\" ), headers = kwargs . get ( \"headers\" , self . _headers ()), params = kwargs . get ( \"params\" ), ) elif method == \"POST\" : response = await self . session . post ( url = endpoint , data = kwargs . get ( \"data\" ), headers = kwargs . get ( \"headers\" , self . _headers ()), ) else : raise UnknownMethodError ( f \"unknown method { kwargs [ 'method' ] } \" ) if response . status == 400 : # TODO: work out how to get the specific response and provide useful answers raise ValueError ( f \"HTTP400: { ( await response . text ()) . strip () } \" ) # likely errors - https://pvoutput.org/help/api_specification.html#error-messages response . raise_for_status () return response async def check_rate_limit ( self ) -> Dict [ str , str ]: \"\"\"Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict \"\"\" headers = self . _headers () headers [ \"X-Rate-Limit\" ] = \"1\" url , method = utils . URLS [ \"getsystem\" ] response = await self . _call ( endpoint = url , params = {}, headers = headers , method = method ) retval = utils . get_rate_limit_header ( response ) return retval async def addstatus ( self , data : Dict [ str , Any ], ) -> aiohttp . ClientResponse : \"\"\"The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: aiohttp.ClientResponse \"\"\" # if you don't set a time, set it to now # can't push this through the validator as it relies on the class config if \"t\" not in data : data [ \"t\" ] = self . get_time_by_base () self . validate_data ( data , ADDSTATUS_PARAMETERS ) url , method = utils . URLS [ \"addstatus\" ] return await self . _call ( endpoint = url , data = data , method = method ) async def addoutput ( self , data : Dict [ str , Any ]) -> aiohttp . ClientResponse : \"\"\"The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: aiohttp.ClientResponse \"\"\" self . validate_data ( data , ADDOUTPUT_PARAMETERS ) url , method = utils . URLS [ \"addoutput\" ] return await self . _call ( endpoint = url , data = data , method = method ) async def delete_status ( self , date_val : datetime . date , time_val : Optional [ datetime . time ] = None , ) -> aiohttp . ClientResponse : \"\"\"Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: aiohttp.ClientResponse \"\"\" self . validate_data ( { \"date_val\" : date_val , \"time_val\" : time_val , }, DELETESTATUS_PARAMETERS , ) data = { \"d\" : date_val . strftime ( \"%Y%m %d \" )} if time_val is not None : data [ \"t\" ] = time_val . strftime ( \"%H:%M\" ) url , method = utils . URLS [ \"deletestatus\" ] return await self . _call ( endpoint = url , data = data , method = method ) async def getstatus ( self ) -> Dict [ str , Any ]: \"\"\"The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict \"\"\" # TODO: extend this, you can do history searches and all sorts with this endpoint params = {} if self . donation_made : params [ \"ext\" ] = 1 params [ \"sid\" ] = self . systemid url , method = utils . URLS [ \"getstatus\" ] response = await self . _call ( endpoint = url , params = params , method = method ) response . raise_for_status () # grab all the things text = await response . text () responsedata , extras = utils . responsedata_to_response ( text . split ( \",\" )) # if we're fancy, we get more data if extras : for i in range ( 1 , 7 ): responsedata [ f \"v { i + 6 } \" ] = ( None if extras [ i - 1 ] == \"NaN\" else float ( extras [ i - 1 ]) ) return responsedata async def register_notification ( self , appid : str , url : str , alerttype : int ) -> aiohttp . ClientResponse : \"\"\"The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: aiohttp.ClientResponse Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"url\" : url , \"alerttype\" : alerttype , }, REGISTER_NOTIFICATION_PARAMETERS , ) call_url , method = utils . URLS [ \"registernotification\" ] params = { \"appid\" : appid , \"type\" : alerttype , \"url\" : url } return await self . _call ( endpoint = call_url , params = params , method = method ) async def deregister_notification ( self , appid : str , alerttype : int ) -> aiohttp . ClientResponse : \"\"\"The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: aiohttp.ClientResponse Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"alerttype\" : alerttype , }, DELETE_NOTIFICATION_PARAMETERS , ) url , method = utils . URLS [ \"deregisternotification\" ] params = { \"appid\" : appid , \"type\" : alerttype } return await self . _call ( endpoint = url , params = params , method = method ) __init__ ( self , apikey , systemid , donation_made = False , stats_period = 5 , session = None ) special Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool Source code in pvoutput/asyncio/__init__.py def __init__ ( self , apikey : str , systemid : int , donation_made : bool = False , stats_period : int = 5 , session : Optional [ aiohttp . ClientSession ] = None , ) -> None : \"\"\"Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool \"\"\" super () . __init__ ( apikey = apikey , systemid = systemid , donation_made = donation_made , stats_period = stats_period , ) if session is None : self . session = aiohttp . ClientSession () else : self . session = session addoutput ( self , data ) async The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: aiohttp.ClientResponse Source code in pvoutput/asyncio/__init__.py async def addoutput ( self , data : Dict [ str , Any ]) -> aiohttp . ClientResponse : \"\"\"The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: aiohttp.ClientResponse \"\"\" self . validate_data ( data , ADDOUTPUT_PARAMETERS ) url , method = utils . URLS [ \"addoutput\" ] return await self . _call ( endpoint = url , data = data , method = method ) addstatus ( self , data ) async The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: aiohttp.ClientResponse Source code in pvoutput/asyncio/__init__.py async def addstatus ( self , data : Dict [ str , Any ], ) -> aiohttp . ClientResponse : \"\"\"The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: aiohttp.ClientResponse \"\"\" # if you don't set a time, set it to now # can't push this through the validator as it relies on the class config if \"t\" not in data : data [ \"t\" ] = self . get_time_by_base () self . validate_data ( data , ADDSTATUS_PARAMETERS ) url , method = utils . URLS [ \"addstatus\" ] return await self . _call ( endpoint = url , data = data , method = method ) check_rate_limit ( self ) async Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict Source code in pvoutput/asyncio/__init__.py async def check_rate_limit ( self ) -> Dict [ str , str ]: \"\"\"Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict \"\"\" headers = self . _headers () headers [ \"X-Rate-Limit\" ] = \"1\" url , method = utils . URLS [ \"getsystem\" ] response = await self . _call ( endpoint = url , params = {}, headers = headers , method = method ) retval = utils . get_rate_limit_header ( response ) return retval delete_status ( self , date_val , time_val = None ) async Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: aiohttp.ClientResponse Source code in pvoutput/asyncio/__init__.py async def delete_status ( self , date_val : datetime . date , time_val : Optional [ datetime . time ] = None , ) -> aiohttp . ClientResponse : \"\"\"Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: aiohttp.ClientResponse \"\"\" self . validate_data ( { \"date_val\" : date_val , \"time_val\" : time_val , }, DELETESTATUS_PARAMETERS , ) data = { \"d\" : date_val . strftime ( \"%Y%m %d \" )} if time_val is not None : data [ \"t\" ] = time_val . strftime ( \"%H:%M\" ) url , method = utils . URLS [ \"deletestatus\" ] return await self . _call ( endpoint = url , data = data , method = method ) deregister_notification ( self , appid , alerttype ) async The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: aiohttp.ClientResponse Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== Source code in pvoutput/asyncio/__init__.py async def deregister_notification ( self , appid : str , alerttype : int ) -> aiohttp . ClientResponse : \"\"\"The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: aiohttp.ClientResponse Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"alerttype\" : alerttype , }, DELETE_NOTIFICATION_PARAMETERS , ) url , method = utils . URLS [ \"deregisternotification\" ] params = { \"appid\" : appid , \"type\" : alerttype } return await self . _call ( endpoint = url , params = params , method = method ) getstatus ( self ) async The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict Source code in pvoutput/asyncio/__init__.py async def getstatus ( self ) -> Dict [ str , Any ]: \"\"\"The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict \"\"\" # TODO: extend this, you can do history searches and all sorts with this endpoint params = {} if self . donation_made : params [ \"ext\" ] = 1 params [ \"sid\" ] = self . systemid url , method = utils . URLS [ \"getstatus\" ] response = await self . _call ( endpoint = url , params = params , method = method ) response . raise_for_status () # grab all the things text = await response . text () responsedata , extras = utils . responsedata_to_response ( text . split ( \",\" )) # if we're fancy, we get more data if extras : for i in range ( 1 , 7 ): responsedata [ f \"v { i + 6 } \" ] = ( None if extras [ i - 1 ] == \"NaN\" else float ( extras [ i - 1 ]) ) return responsedata register_notification ( self , appid , url , alerttype ) async The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: aiohttp.ClientResponse Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== Source code in pvoutput/asyncio/__init__.py async def register_notification ( self , appid : str , url : str , alerttype : int ) -> aiohttp . ClientResponse : \"\"\"The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: aiohttp.ClientResponse Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"url\" : url , \"alerttype\" : alerttype , }, REGISTER_NOTIFICATION_PARAMETERS , ) call_url , method = utils . URLS [ \"registernotification\" ] params = { \"appid\" : appid , \"type\" : alerttype , \"url\" : url } return await self . _call ( endpoint = call_url , params = params , method = method ) base base class for pvoutput PVOutputBase base class for the PVOutput API Source code in pvoutput/base.py class PVOutputBase : \"\"\"base class for the PVOutput API\"\"\" def __init__ ( self , apikey : str , systemid : int , donation_made : bool = False , stats_period : int = 5 , ) -> None : if not isinstance ( systemid , int ): raise TypeError ( \"systemid should be int\" ) if not isinstance ( apikey , str ): raise TypeError ( \"apikey should be str\" ) self . apikey = apikey self . systemid = systemid self . donation_made = donation_made self . stats_period = stats_period def _headers ( self ) -> Dict [ str , str ]: \"\"\"Relevant documentation: https://pvoutput.org/help/api_specification.html#http-headers :return: headers for calls to the API :rtype: dict \"\"\" headers = { \"X-Pvoutput-Apikey\" : self . apikey , \"X-Pvoutput-SystemId\" : str ( self . systemid ), } return headers def get_time_by_base ( self ) -> str : \"\"\"rounds the current time to the base specified (ie, to 15 minutes or 5 minutes etc)\"\"\" now = datetime . now () hour = int ( now . strftime ( \"%H\" )) # round the minute to the current stats period minute = int ( round_to_base ( now . minute , self . stats_period )) return time ( hour = hour , minute = minute ) . strftime ( \"%H:%M\" ) @classmethod def _validate_format ( cls , format_string : AnyStr , key : str , value : Any , ) -> None : \"\"\"handles the regular expression format checks\"\"\" try : compiled = re . compile ( format_string ) match = compiled . match ( value ) if match is None : raise ValueError ( f \"key ' { key } ', with value ' { value } ' does not match ' { format_string !r} '\" ) except re . error as error : raise InvalidRegexpError ( \"Error for key ' {key} ' with format ' {format_string!r} ': {error} \" ) from error # pylint: disable=too-many-branches def validate_data ( self , data : Dict [ str , Any ], apiset : Dict [ str , Any ]) -> bool : \"\"\"Does a super-simple validation based on the api def raises errors if it's wrong, returns True if it's OK This'll only raise an error on the first error it finds :param data: the data to validate. :type data: dict :param apiset: A set of validation rules, eg: pvoutput.ADDSTATUS_PARAMETERS :type apiset: dict :raises TypeError: if the type testing fails. :raises ValueError: if you're trying to pass an invalid value. :raises pvoutput.InvalidRegexpError: if value does not match the regexp in format. \"\"\" # if you set a 'required_oneof' key in apiset, validation will require at least one of those keys to be set if \"required_oneof\" in apiset . keys () and ( len ([ key for key in data . keys () if key in apiset [ \"required_oneof\" ][ \"keys\" ]]) == 0 ): raise ValueError ( f \"one of { ',' . join ( apiset [ 'required_oneof' ][ 'keys' ]) } MUST be set\" ) for key in apiset . keys (): # check that that required values are set if apiset [ key ] . get ( \"required\" , False ) and key not in data . keys (): if \"default\" in apiset [ key ]: # set a default value data [ key ] = apiset [ key ][ \"default\" ] else : raise ValueError ( f \"key { key } required in data\" ) # check maxlen if \"maxlen\" in apiset [ key ] and key in data : if len ( data [ key ]) > apiset [ key ][ \"maxlen\" ]: raise ValueError ( f \"Value too long for key { key } { len ( data [ key ]) } > { apiset [ key ][ 'maxlen' ] } \" ) # check the value is in the set of valid choices if \"choices\" in apiset [ key ] and key in data : if data [ key ] not in apiset [ key ][ \"choices\" ]: raise ValueError ( f \"Invalid value for key { key } : ' { data [ key ] } ', should be in { apiset [ key ][ 'choices' ] } \" ) # check there's no extra fields in the data for key in data : if key not in apiset . keys (): raise ValueError ( f \"key { key } isn't valid in the API spec\" ) if apiset [ key ] . get ( \"type\" ) and not isinstance ( data [ key ], apiset [ key ][ \"type\" ] ): if data [ key ] is not None : raise TypeError ( f \"data[ { key } ] type ( { type ( data [ key ]) } is invalid - should be { str ( apiset [ key ][ 'type' ]) } )\" ) for key in data : if \"format\" in apiset [ key ]: self . _validate_format ( apiset [ key ][ \"format\" ], key , data [ key ]) # can run additional functions over the data if \"additional_validators\" in apiset [ key ]: for validator in apiset [ key ][ \"additional_validators\" ]: validator ( data [ key ]) # TODO: 'd' can't be more than 14 days ago, if a donator, goes out to 90 # check if donation_made == True and age of thing # if self.donation_made: # # check if more than 90 days ago # else: # # check if more than 14 days ago # check for donation-only keys if apiset [ key ] . get ( \"donation_required\" ) and not self . donation_made : raise DonationRequired ( f \"key { key } requires an account which has donated\" ) # check if you're outside max/min values if apiset [ key ] . get ( \"maxval\" ) and data . get ( key ) > apiset [ key ] . get ( \"maxval\" ): raise ValueError ( f \" { key } cannot be higher than { apiset [ key ][ 'maxval' ] } , is { data [ key ] } \" ) if apiset [ key ] . get ( \"minval\" ) and data . get ( key ) < apiset [ key ] . get ( \"minval\" ): raise ValueError ( f \" { key } cannot be lower than { apiset [ key ][ 'minval' ] } , is { data [ key ] } \" ) return True get_time_by_base ( self ) rounds the current time to the base specified (ie, to 15 minutes or 5 minutes etc) Source code in pvoutput/base.py def get_time_by_base ( self ) -> str : \"\"\"rounds the current time to the base specified (ie, to 15 minutes or 5 minutes etc)\"\"\" now = datetime . now () hour = int ( now . strftime ( \"%H\" )) # round the minute to the current stats period minute = int ( round_to_base ( now . minute , self . stats_period )) return time ( hour = hour , minute = minute ) . strftime ( \"%H:%M\" ) validate_data ( self , data , apiset ) Does a super-simple validation based on the api def raises errors if it's wrong, returns True if it's OK This'll only raise an error on the first error it finds :param data: the data to validate. :type data: dict :param apiset: A set of validation rules, eg: pvoutput.ADDSTATUS_PARAMETERS :type apiset: dict :raises TypeError: if the type testing fails. :raises ValueError: if you're trying to pass an invalid value. :raises pvoutput.InvalidRegexpError: if value does not match the regexp in format. Source code in pvoutput/base.py def validate_data ( self , data : Dict [ str , Any ], apiset : Dict [ str , Any ]) -> bool : \"\"\"Does a super-simple validation based on the api def raises errors if it's wrong, returns True if it's OK This'll only raise an error on the first error it finds :param data: the data to validate. :type data: dict :param apiset: A set of validation rules, eg: pvoutput.ADDSTATUS_PARAMETERS :type apiset: dict :raises TypeError: if the type testing fails. :raises ValueError: if you're trying to pass an invalid value. :raises pvoutput.InvalidRegexpError: if value does not match the regexp in format. \"\"\" # if you set a 'required_oneof' key in apiset, validation will require at least one of those keys to be set if \"required_oneof\" in apiset . keys () and ( len ([ key for key in data . keys () if key in apiset [ \"required_oneof\" ][ \"keys\" ]]) == 0 ): raise ValueError ( f \"one of { ',' . join ( apiset [ 'required_oneof' ][ 'keys' ]) } MUST be set\" ) for key in apiset . keys (): # check that that required values are set if apiset [ key ] . get ( \"required\" , False ) and key not in data . keys (): if \"default\" in apiset [ key ]: # set a default value data [ key ] = apiset [ key ][ \"default\" ] else : raise ValueError ( f \"key { key } required in data\" ) # check maxlen if \"maxlen\" in apiset [ key ] and key in data : if len ( data [ key ]) > apiset [ key ][ \"maxlen\" ]: raise ValueError ( f \"Value too long for key { key } { len ( data [ key ]) } > { apiset [ key ][ 'maxlen' ] } \" ) # check the value is in the set of valid choices if \"choices\" in apiset [ key ] and key in data : if data [ key ] not in apiset [ key ][ \"choices\" ]: raise ValueError ( f \"Invalid value for key { key } : ' { data [ key ] } ', should be in { apiset [ key ][ 'choices' ] } \" ) # check there's no extra fields in the data for key in data : if key not in apiset . keys (): raise ValueError ( f \"key { key } isn't valid in the API spec\" ) if apiset [ key ] . get ( \"type\" ) and not isinstance ( data [ key ], apiset [ key ][ \"type\" ] ): if data [ key ] is not None : raise TypeError ( f \"data[ { key } ] type ( { type ( data [ key ]) } is invalid - should be { str ( apiset [ key ][ 'type' ]) } )\" ) for key in data : if \"format\" in apiset [ key ]: self . _validate_format ( apiset [ key ][ \"format\" ], key , data [ key ]) # can run additional functions over the data if \"additional_validators\" in apiset [ key ]: for validator in apiset [ key ][ \"additional_validators\" ]: validator ( data [ key ]) # TODO: 'd' can't be more than 14 days ago, if a donator, goes out to 90 # check if donation_made == True and age of thing # if self.donation_made: # # check if more than 90 days ago # else: # # check if more than 14 days ago # check for donation-only keys if apiset [ key ] . get ( \"donation_required\" ) and not self . donation_made : raise DonationRequired ( f \"key { key } requires an account which has donated\" ) # check if you're outside max/min values if apiset [ key ] . get ( \"maxval\" ) and data . get ( key ) > apiset [ key ] . get ( \"maxval\" ): raise ValueError ( f \" { key } cannot be higher than { apiset [ key ][ 'maxval' ] } , is { data [ key ] } \" ) if apiset [ key ] . get ( \"minval\" ) and data . get ( key ) < apiset [ key ] . get ( \"minval\" ): raise ValueError ( f \" { key } cannot be lower than { apiset [ key ][ 'minval' ] } , is { data [ key ] } \" ) return True round_to_base ( number , base ) rounds down to a specific base number based on answer in https://stackoverflow.com/a/2272174/188774 Source code in pvoutput/base.py def round_to_base ( number : Union [ int , float ], base : Union [ int , float ]) -> float : \"\"\"rounds down to a specific base number based on answer in https://stackoverflow.com/a/2272174/188774 \"\"\" return base * round ( floor ( number / base )) exceptions Custom exceptions. DonationRequired ( Exception ) A custom exception for when you call a method that requires a donation-enabled account Source code in pvoutput/exceptions.py class DonationRequired ( Exception ): \"\"\"A custom exception for when you call a method that requires a donation-enabled account\"\"\" InvalidRegexpError ( Exception ) There was an error with the regexp format for this key Source code in pvoutput/exceptions.py class InvalidRegexpError ( Exception ): \"\"\"There was an error with the regexp format for this key\"\"\" UnknownAlertTypeError ( Exception ) The provided Alert Type is not supported Source code in pvoutput/exceptions.py class UnknownAlertTypeError ( Exception ): \"\"\"The provided Alert Type is not supported\"\"\" UnknownMethodError ( Exception ) The method is unknown. Source code in pvoutput/exceptions.py class UnknownMethodError ( Exception ): \"\"\"The method is unknown.\"\"\" parameters Standard parameter things. ADDSTATUS_PARAMETERS Cumulative Energy The following values are valid for the c1 flag. 1 Both v1 and v3 values are lifetime energy values. Consumption and generation energy is reset to 0 at the start of the day. 2 Only v1 generation is a lifetime energy value. 3 Only v3 consumption is a lifetime energy value. utils Utilities get_rate_limit_header ( response_object ) gets the rate limit header from the returned headers Source code in pvoutput/utils.py def get_rate_limit_header ( response_object : Any ) -> Dict [ str , str ]: \"\"\"gets the rate limit header from the returned headers\"\"\" retval = {} for key in response_object . headers . keys (): if key . startswith ( \"X-Rate-Limit\" ): retval [ key ] = str ( response_object . headers [ key ]) return retval responsedata_to_response ( input_data ) Turns the status output into a dict Source code in pvoutput/utils.py def responsedata_to_response ( input_data : List [ str ]) -> Tuple [ Dict [ str , Any ], List [ str ]]: \"\"\"Turns the status output into a dict\"\"\" # pylint: disable=invalid-name d , t , v1 , v2 , v3 , v4 , v5 , v6 , normalised_output , * extras = input_data # if there's no data, you get \"NaN\". Here we change that to NoneType responsedata = { \"d\" : d , \"t\" : t , \"timestamp\" : datetime . strptime ( f \" { d } { t } \" , \"%Y%m %d %H:%M\" ), \"v1\" : None if v1 == \"NaN\" else float ( v1 ), \"v2\" : None if v2 == \"NaN\" else float ( v2 ), \"v3\" : None if v3 == \"NaN\" else float ( v3 ), \"v4\" : None if v4 == \"NaN\" else float ( v4 ), \"v5\" : None if v5 == \"NaN\" else float ( v5 ), \"v6\" : None if v6 == \"NaN\" else float ( v6 ), \"normalised_output\" : float ( normalised_output ), } return responsedata , extras validate_delete_status_date ( date_val ) runs the validation for the date_val option of delete_status Source code in pvoutput/utils.py def validate_delete_status_date ( date_val : date ) -> None : \"\"\"runs the validation for the date_val option of delete_status\"\"\" yesterday = date . today () - timedelta ( days = 1 ) tomorrow = date . today () + timedelta ( days = 1 ) # you can't delete back past yesterday if date_val < yesterday : raise ValueError ( f \"date_val can only be yesterday or today, you provided { date_val } \" ) # you can't delete forward of today if date_val >= tomorrow : raise ValueError ( f \"date_val can only be yesterday or today, you provided { date_val } \" )","title":"API Documentation"},{"location":"api/#pvoutput.PVOutput","text":"This class provides an interface to the pvoutput.org API Source code in pvoutput/__init__.py class PVOutput ( PVOutputBase ): \"\"\"This class provides an interface to the pvoutput.org API\"\"\" # pylint: disable=too-many-arguments def __init__ ( self , apikey : str , systemid : int , donation_made : bool = False , stats_period : int = 5 , session : Optional [ requests . Session ] = None , ): \"\"\"Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool \"\"\" super () . __init__ ( apikey = apikey , systemid = systemid , donation_made = donation_made , stats_period = stats_period , ) self . session = session if session is None : self . session = requests . Session () def _call ( self , endpoint : str , method : str = \"POST\" , ** kwargs : Dict [ str , Any ], ) -> requests . Response : \"\"\"Makes a call to a URL endpoint with the data/headers/method you require. :param endpoint: The URL to call :type endpoint: str :param data: Data to send :type data: dict :param headers: Additional headers, if unset it'll use self._headers() which is the standard API key / systemid set (eg, self.check_rate_limit) :type headers: dict :param method: specify a method if you want to use something other than POST :type method: str :returns: The response object :rtype: requests.Response :raises TypeError: if the data you pass is of the wrong format. :raises ValueError: if the call throws a HTTP 400 error. :raises requests.exception: if method throws an exception. \"\"\" self . validate_data ( kwargs , CALL_PARAMETERS ) if method == \"GET\" : response = requests . get ( endpoint , data = kwargs . get ( \"data\" ), headers = kwargs . get ( \"headers\" , self . _headers ()), params = kwargs . get ( \"params\" ), ) elif method == \"POST\" : response = requests . post ( endpoint , data = kwargs . get ( \"data\" ), headers = kwargs . get ( \"headers\" , self . _headers ()), ) else : raise UnknownMethodError ( f \"unknown method { kwargs [ 'method' ] } \" ) if response . status_code == 400 : # TODO: work out how to get the specific response and provide useful answers raise ValueError ( f \"HTTP400: { response . text . strip () } \" ) # likely errors - https://pvoutput.org/help/api_specification.html#error-messages response . raise_for_status () return response def check_rate_limit ( self ) -> Dict [ str , str ]: \"\"\"Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict \"\"\" headers = self . _headers () headers [ \"X-Rate-Limit\" ] = \"1\" url , method = utils . URLS [ \"getsystem\" ] response = self . _call ( endpoint = url , params = {}, headers = headers , method = method ) retval = utils . get_rate_limit_header ( response ) return retval def addstatus ( self , data : Dict [ str , Any ], ) -> requests . Response : \"\"\"The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: requests.Response \"\"\" # if you don't set a time, set it to now # can't push this through the validator as it relies on the class config if \"t\" not in data : data [ \"t\" ] = self . get_time_by_base () self . validate_data ( data , ADDSTATUS_PARAMETERS ) url , method = utils . URLS [ \"addstatus\" ] return self . _call ( endpoint = url , data = data , method = method ) def addoutput ( self , data : Dict [ str , Any ], ) -> requests . Response : \"\"\"The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: requests.Response \"\"\" self . validate_data ( data , ADDOUTPUT_PARAMETERS ) url , method = utils . URLS [ \"addoutput\" ] return self . _call ( endpoint = url , data = data , method = method ) def delete_status ( self , date_val : datetime . date , time_val : Optional [ datetime . time ] = None ) -> requests . Response : \"\"\" Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: requests.Response \"\"\" self . validate_data ( { \"date_val\" : date_val , \"time_val\" : time_val , }, DELETESTATUS_PARAMETERS , ) data = { \"d\" : date_val . strftime ( \"%Y%m %d \" )} if time_val is not None : data [ \"t\" ] = time_val . strftime ( \"%H:%M\" ) url , method = utils . URLS [ \"deletestatus\" ] return self . _call ( endpoint = url , data = data , method = method ) def getstatus ( self ) -> Dict [ str , Any ]: \"\"\"The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict \"\"\" # TODO: extend this, you can do history searches and all sorts with this endpoint params = {} if self . donation_made : params [ \"ext\" ] = 1 params [ \"sid\" ] = self . systemid url , method = utils . URLS [ \"getstatus\" ] response = self . _call ( endpoint = url , params = params , method = method ) response . raise_for_status () # grab all the things responsedata , extras = utils . responsedata_to_response ( response . text . split ( \",\" )) # if we're fancy, we get more data if extras : for i in range ( 1 , 7 ): responsedata [ f \"v { i + 6 } \" ] = ( None if extras [ i - 1 ] == \"NaN\" else float ( extras [ i - 1 ]) ) return responsedata def register_notification ( self , appid : str , url : str , alerttype : int ) -> requests . Response : \"\"\"The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"url\" : url , \"alerttype\" : alerttype , }, REGISTER_NOTIFICATION_PARAMETERS , ) call_url , method = utils . URLS [ \"registernotification\" ] params = { \"appid\" : appid , \"type\" : alerttype , \"url\" : url } return self . _call ( endpoint = call_url , params = params , method = method ) def deregister_notification ( self , appid : str , alerttype : int ) -> requests . Response : \"\"\"The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"alerttype\" : alerttype , }, DELETE_NOTIFICATION_PARAMETERS , ) url , method = utils . URLS [ \"deregisternotification\" ] params = { \"appid\" : appid , \"type\" : alerttype } return self . _call ( endpoint = url , params = params , method = method )","title":"PVOutput"},{"location":"api/#pvoutput.PVOutput.__init__","text":"Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool Source code in pvoutput/__init__.py def __init__ ( self , apikey : str , systemid : int , donation_made : bool = False , stats_period : int = 5 , session : Optional [ requests . Session ] = None , ): \"\"\"Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool \"\"\" super () . __init__ ( apikey = apikey , systemid = systemid , donation_made = donation_made , stats_period = stats_period , ) self . session = session if session is None : self . session = requests . Session ()","title":"__init__()"},{"location":"api/#pvoutput.PVOutput.addoutput","text":"The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: requests.Response Source code in pvoutput/__init__.py def addoutput ( self , data : Dict [ str , Any ], ) -> requests . Response : \"\"\"The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: requests.Response \"\"\" self . validate_data ( data , ADDOUTPUT_PARAMETERS ) url , method = utils . URLS [ \"addoutput\" ] return self . _call ( endpoint = url , data = data , method = method )","title":"addoutput()"},{"location":"api/#pvoutput.PVOutput.addstatus","text":"The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: requests.Response Source code in pvoutput/__init__.py def addstatus ( self , data : Dict [ str , Any ], ) -> requests . Response : \"\"\"The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: requests.Response \"\"\" # if you don't set a time, set it to now # can't push this through the validator as it relies on the class config if \"t\" not in data : data [ \"t\" ] = self . get_time_by_base () self . validate_data ( data , ADDSTATUS_PARAMETERS ) url , method = utils . URLS [ \"addstatus\" ] return self . _call ( endpoint = url , data = data , method = method )","title":"addstatus()"},{"location":"api/#pvoutput.PVOutput.check_rate_limit","text":"Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict Source code in pvoutput/__init__.py def check_rate_limit ( self ) -> Dict [ str , str ]: \"\"\"Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict \"\"\" headers = self . _headers () headers [ \"X-Rate-Limit\" ] = \"1\" url , method = utils . URLS [ \"getsystem\" ] response = self . _call ( endpoint = url , params = {}, headers = headers , method = method ) retval = utils . get_rate_limit_header ( response ) return retval","title":"check_rate_limit()"},{"location":"api/#pvoutput.PVOutput.delete_status","text":"Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: requests.Response Source code in pvoutput/__init__.py def delete_status ( self , date_val : datetime . date , time_val : Optional [ datetime . time ] = None ) -> requests . Response : \"\"\" Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: requests.Response \"\"\" self . validate_data ( { \"date_val\" : date_val , \"time_val\" : time_val , }, DELETESTATUS_PARAMETERS , ) data = { \"d\" : date_val . strftime ( \"%Y%m %d \" )} if time_val is not None : data [ \"t\" ] = time_val . strftime ( \"%H:%M\" ) url , method = utils . URLS [ \"deletestatus\" ] return self . _call ( endpoint = url , data = data , method = method )","title":"delete_status()"},{"location":"api/#pvoutput.PVOutput.deregister_notification","text":"The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== Source code in pvoutput/__init__.py def deregister_notification ( self , appid : str , alerttype : int ) -> requests . Response : \"\"\"The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"alerttype\" : alerttype , }, DELETE_NOTIFICATION_PARAMETERS , ) url , method = utils . URLS [ \"deregisternotification\" ] params = { \"appid\" : appid , \"type\" : alerttype } return self . _call ( endpoint = url , params = params , method = method )","title":"deregister_notification()"},{"location":"api/#pvoutput.PVOutput.getstatus","text":"The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict Source code in pvoutput/__init__.py def getstatus ( self ) -> Dict [ str , Any ]: \"\"\"The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict \"\"\" # TODO: extend this, you can do history searches and all sorts with this endpoint params = {} if self . donation_made : params [ \"ext\" ] = 1 params [ \"sid\" ] = self . systemid url , method = utils . URLS [ \"getstatus\" ] response = self . _call ( endpoint = url , params = params , method = method ) response . raise_for_status () # grab all the things responsedata , extras = utils . responsedata_to_response ( response . text . split ( \",\" )) # if we're fancy, we get more data if extras : for i in range ( 1 , 7 ): responsedata [ f \"v { i + 6 } \" ] = ( None if extras [ i - 1 ] == \"NaN\" else float ( extras [ i - 1 ]) ) return responsedata","title":"getstatus()"},{"location":"api/#pvoutput.PVOutput.register_notification","text":"The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== Source code in pvoutput/__init__.py def register_notification ( self , appid : str , url : str , alerttype : int ) -> requests . Response : \"\"\"The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: requests.Response Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"url\" : url , \"alerttype\" : alerttype , }, REGISTER_NOTIFICATION_PARAMETERS , ) call_url , method = utils . URLS [ \"registernotification\" ] params = { \"appid\" : appid , \"type\" : alerttype , \"url\" : url } return self . _call ( endpoint = call_url , params = params , method = method )","title":"register_notification()"},{"location":"api/#pvoutput.asyncio","text":"AsyncIO interface to the PVOutput API","title":"asyncio"},{"location":"api/#pvoutput.asyncio.PVOutput","text":"This class provides an interface to the pvoutput.org API Source code in pvoutput/asyncio/__init__.py class PVOutput ( PVOutputBase ): \"\"\"This class provides an interface to the pvoutput.org API\"\"\" # pylint: disable=too-many-arguments def __init__ ( self , apikey : str , systemid : int , donation_made : bool = False , stats_period : int = 5 , session : Optional [ aiohttp . ClientSession ] = None , ) -> None : \"\"\"Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool \"\"\" super () . __init__ ( apikey = apikey , systemid = systemid , donation_made = donation_made , stats_period = stats_period , ) if session is None : self . session = aiohttp . ClientSession () else : self . session = session async def _call ( self , endpoint : str , method : str = \"POST\" , ** kwargs : Dict [ str , Any ], ) -> aiohttp . ClientResponse : \"\"\"Makes a call to a URL endpoint with the data/headers/method you require. :param endpoint: The URL to call :type endpoint: str :param data: Data to send :type data: dict :param headers: Additional headers, if unset it'll use self._headers() which is the standard API key / systemid set (eg, self.check_rate_limit) :type headers: dict :param method: specify a method if you want to use something other than POST :type method: str :returns: The response object :rtype: aiohttp.ClientResponse :raises TypeError: if the data you pass is of the wrong format. :raises ValueError: if the call throws a HTTP 400 error. :raises requests.exception: if method throws an exception. \"\"\" self . validate_data ( kwargs , CALL_PARAMETERS ) if method == \"GET\" : response = await self . session . get ( url = endpoint , data = kwargs . get ( \"data\" ), headers = kwargs . get ( \"headers\" , self . _headers ()), params = kwargs . get ( \"params\" ), ) elif method == \"POST\" : response = await self . session . post ( url = endpoint , data = kwargs . get ( \"data\" ), headers = kwargs . get ( \"headers\" , self . _headers ()), ) else : raise UnknownMethodError ( f \"unknown method { kwargs [ 'method' ] } \" ) if response . status == 400 : # TODO: work out how to get the specific response and provide useful answers raise ValueError ( f \"HTTP400: { ( await response . text ()) . strip () } \" ) # likely errors - https://pvoutput.org/help/api_specification.html#error-messages response . raise_for_status () return response async def check_rate_limit ( self ) -> Dict [ str , str ]: \"\"\"Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict \"\"\" headers = self . _headers () headers [ \"X-Rate-Limit\" ] = \"1\" url , method = utils . URLS [ \"getsystem\" ] response = await self . _call ( endpoint = url , params = {}, headers = headers , method = method ) retval = utils . get_rate_limit_header ( response ) return retval async def addstatus ( self , data : Dict [ str , Any ], ) -> aiohttp . ClientResponse : \"\"\"The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: aiohttp.ClientResponse \"\"\" # if you don't set a time, set it to now # can't push this through the validator as it relies on the class config if \"t\" not in data : data [ \"t\" ] = self . get_time_by_base () self . validate_data ( data , ADDSTATUS_PARAMETERS ) url , method = utils . URLS [ \"addstatus\" ] return await self . _call ( endpoint = url , data = data , method = method ) async def addoutput ( self , data : Dict [ str , Any ]) -> aiohttp . ClientResponse : \"\"\"The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: aiohttp.ClientResponse \"\"\" self . validate_data ( data , ADDOUTPUT_PARAMETERS ) url , method = utils . URLS [ \"addoutput\" ] return await self . _call ( endpoint = url , data = data , method = method ) async def delete_status ( self , date_val : datetime . date , time_val : Optional [ datetime . time ] = None , ) -> aiohttp . ClientResponse : \"\"\"Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: aiohttp.ClientResponse \"\"\" self . validate_data ( { \"date_val\" : date_val , \"time_val\" : time_val , }, DELETESTATUS_PARAMETERS , ) data = { \"d\" : date_val . strftime ( \"%Y%m %d \" )} if time_val is not None : data [ \"t\" ] = time_val . strftime ( \"%H:%M\" ) url , method = utils . URLS [ \"deletestatus\" ] return await self . _call ( endpoint = url , data = data , method = method ) async def getstatus ( self ) -> Dict [ str , Any ]: \"\"\"The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict \"\"\" # TODO: extend this, you can do history searches and all sorts with this endpoint params = {} if self . donation_made : params [ \"ext\" ] = 1 params [ \"sid\" ] = self . systemid url , method = utils . URLS [ \"getstatus\" ] response = await self . _call ( endpoint = url , params = params , method = method ) response . raise_for_status () # grab all the things text = await response . text () responsedata , extras = utils . responsedata_to_response ( text . split ( \",\" )) # if we're fancy, we get more data if extras : for i in range ( 1 , 7 ): responsedata [ f \"v { i + 6 } \" ] = ( None if extras [ i - 1 ] == \"NaN\" else float ( extras [ i - 1 ]) ) return responsedata async def register_notification ( self , appid : str , url : str , alerttype : int ) -> aiohttp . ClientResponse : \"\"\"The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: aiohttp.ClientResponse Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"url\" : url , \"alerttype\" : alerttype , }, REGISTER_NOTIFICATION_PARAMETERS , ) call_url , method = utils . URLS [ \"registernotification\" ] params = { \"appid\" : appid , \"type\" : alerttype , \"url\" : url } return await self . _call ( endpoint = call_url , params = params , method = method ) async def deregister_notification ( self , appid : str , alerttype : int ) -> aiohttp . ClientResponse : \"\"\"The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: aiohttp.ClientResponse Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"alerttype\" : alerttype , }, DELETE_NOTIFICATION_PARAMETERS , ) url , method = utils . URLS [ \"deregisternotification\" ] params = { \"appid\" : appid , \"type\" : alerttype } return await self . _call ( endpoint = url , params = params , method = method )","title":"PVOutput"},{"location":"api/#pvoutput.asyncio.PVOutput.__init__","text":"Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool Source code in pvoutput/asyncio/__init__.py def __init__ ( self , apikey : str , systemid : int , donation_made : bool = False , stats_period : int = 5 , session : Optional [ aiohttp . ClientSession ] = None , ) -> None : \"\"\"Setup code :param apikey: API key (read or write) :type apikey: str :param systemid: system ID :type systemid: int :param donation_made: Whether to use the donation-required fields :type donation_made: bool \"\"\" super () . __init__ ( apikey = apikey , systemid = systemid , donation_made = donation_made , stats_period = stats_period , ) if session is None : self . session = aiohttp . ClientSession () else : self . session = session","title":"__init__()"},{"location":"api/#pvoutput.asyncio.PVOutput.addoutput","text":"The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: aiohttp.ClientResponse Source code in pvoutput/asyncio/__init__.py async def addoutput ( self , data : Dict [ str , Any ]) -> aiohttp . ClientResponse : \"\"\"The Add Output service uploads end of day output information. It allows all of the information provided on the Add Output page to be uploaded. API Spec: https://pvoutput.org/help/api_specification.html#add-output-service :param data: The output data to upload :type data: dict :returns: The response object :rtype: aiohttp.ClientResponse \"\"\" self . validate_data ( data , ADDOUTPUT_PARAMETERS ) url , method = utils . URLS [ \"addoutput\" ] return await self . _call ( endpoint = url , data = data , method = method )","title":"addoutput()"},{"location":"api/#pvoutput.asyncio.PVOutput.addstatus","text":"The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: aiohttp.ClientResponse Source code in pvoutput/asyncio/__init__.py async def addstatus ( self , data : Dict [ str , Any ], ) -> aiohttp . ClientResponse : \"\"\"The Add Status service accepts live output data at the Status Interval (5 to 15 minutes) configured for the system. API Spec: https://pvoutput.org/help/api_specification.html#add-status-service :param data: The status data :type data: dict :returns: The response object :rtype: aiohttp.ClientResponse \"\"\" # if you don't set a time, set it to now # can't push this through the validator as it relies on the class config if \"t\" not in data : data [ \"t\" ] = self . get_time_by_base () self . validate_data ( data , ADDSTATUS_PARAMETERS ) url , method = utils . URLS [ \"addstatus\" ] return await self . _call ( endpoint = url , data = data , method = method )","title":"addstatus()"},{"location":"api/#pvoutput.asyncio.PVOutput.check_rate_limit","text":"Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict Source code in pvoutput/asyncio/__init__.py async def check_rate_limit ( self ) -> Dict [ str , str ]: \"\"\"Makes a call to the site, checking if you have hit the rate limit. API spec: https://pvoutput.org/help/api_specification.html#rate-limits :returns: the headers relating to the rate limit. :rtype: dict \"\"\" headers = self . _headers () headers [ \"X-Rate-Limit\" ] = \"1\" url , method = utils . URLS [ \"getsystem\" ] response = await self . _call ( endpoint = url , params = {}, headers = headers , method = method ) retval = utils . get_rate_limit_header ( response ) return retval","title":"check_rate_limit()"},{"location":"api/#pvoutput.asyncio.PVOutput.delete_status","text":"Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: aiohttp.ClientResponse Source code in pvoutput/asyncio/__init__.py async def delete_status ( self , date_val : datetime . date , time_val : Optional [ datetime . time ] = None , ) -> aiohttp . ClientResponse : \"\"\"Deletes a given status, based on the provided parameters needs a datetime() object set the hours/minutes to non-zero to delete a specific time API spec: https://pvoutput.org/help/api_specification.html#delete-status-service :param date_val: The date to delete. :type date_val: datetime.datetime.date :param time_val: The time entry to delete. :type time_val: datetime.datetime.time :returns: The response object :rtype: aiohttp.ClientResponse \"\"\" self . validate_data ( { \"date_val\" : date_val , \"time_val\" : time_val , }, DELETESTATUS_PARAMETERS , ) data = { \"d\" : date_val . strftime ( \"%Y%m %d \" )} if time_val is not None : data [ \"t\" ] = time_val . strftime ( \"%H:%M\" ) url , method = utils . URLS [ \"deletestatus\" ] return await self . _call ( endpoint = url , data = data , method = method )","title":"delete_status()"},{"location":"api/#pvoutput.asyncio.PVOutput.deregister_notification","text":"The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: aiohttp.ClientResponse Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== Source code in pvoutput/asyncio/__init__.py async def deregister_notification ( self , appid : str , alerttype : int ) -> aiohttp . ClientResponse : \"\"\"The Deregister Notification Service removes registered notifications under an application id for a system. API spec: https://pvoutput.org/help/api_specification.html#deregister-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: aiohttp.ClientResponse Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"alerttype\" : alerttype , }, DELETE_NOTIFICATION_PARAMETERS , ) url , method = utils . URLS [ \"deregisternotification\" ] params = { \"appid\" : appid , \"type\" : alerttype } return await self . _call ( endpoint = url , params = params , method = method )","title":"deregister_notification()"},{"location":"api/#pvoutput.asyncio.PVOutput.getstatus","text":"The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict Source code in pvoutput/asyncio/__init__.py async def getstatus ( self ) -> Dict [ str , Any ]: \"\"\"The Get Status service retrieves system status information and live output data. API spec: https://pvoutput.org/help/api_specification.html#get-status-service :returns: the last updated data :rtype: dict \"\"\" # TODO: extend this, you can do history searches and all sorts with this endpoint params = {} if self . donation_made : params [ \"ext\" ] = 1 params [ \"sid\" ] = self . systemid url , method = utils . URLS [ \"getstatus\" ] response = await self . _call ( endpoint = url , params = params , method = method ) response . raise_for_status () # grab all the things text = await response . text () responsedata , extras = utils . responsedata_to_response ( text . split ( \",\" )) # if we're fancy, we get more data if extras : for i in range ( 1 , 7 ): responsedata [ f \"v { i + 6 } \" ] = ( None if extras [ i - 1 ] == \"NaN\" else float ( extras [ i - 1 ]) ) return responsedata","title":"getstatus()"},{"location":"api/#pvoutput.asyncio.PVOutput.register_notification","text":"The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: aiohttp.ClientResponse Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== Source code in pvoutput/asyncio/__init__.py async def register_notification ( self , appid : str , url : str , alerttype : int ) -> aiohttp . ClientResponse : \"\"\"The Register Notification Service allows a third party application to receive PVOutput alert callbacks via a HTTP end point. API spec: https://pvoutput.org/help/api_specification.html#register-notification-service All parameters are mandatory :param appid: Application ID (eg: example.app.id) :type appid: str (maxlen: 100) :param url: Callback URL (eg: http://example.com/api/) :type url: str (maxlen: 150) :param alerttype: Alert Type (See list below) :type alerttype: int :return: The response object :rtype: aiohttp.ClientResponse Alert Type list: ===== ==== Value Type ===== ==== 0 All Notifications 1 Private Message 3 Joined Team 4 Added Favourite 5 High Consumption Alert 6 System Idle Alert 8 Low Generation Alert 11 Performance Alert 14 Standby Cost Alert 15 Extended Data V7 Alert 16 Extended Data V8 Alert 17 Extended Data V9 Alert 18 Extended Data V10 Alert 19 Extended Data V11 Alert 20 Extended Data V12 Alert 23 High Net Power Alert 24 Low Net Power Alert ===== ==== \"\"\" self . validate_data ( { \"appid\" : appid , \"url\" : url , \"alerttype\" : alerttype , }, REGISTER_NOTIFICATION_PARAMETERS , ) call_url , method = utils . URLS [ \"registernotification\" ] params = { \"appid\" : appid , \"type\" : alerttype , \"url\" : url } return await self . _call ( endpoint = call_url , params = params , method = method )","title":"register_notification()"},{"location":"api/#pvoutput.base","text":"base class for pvoutput","title":"base"},{"location":"api/#pvoutput.base.PVOutputBase","text":"base class for the PVOutput API Source code in pvoutput/base.py class PVOutputBase : \"\"\"base class for the PVOutput API\"\"\" def __init__ ( self , apikey : str , systemid : int , donation_made : bool = False , stats_period : int = 5 , ) -> None : if not isinstance ( systemid , int ): raise TypeError ( \"systemid should be int\" ) if not isinstance ( apikey , str ): raise TypeError ( \"apikey should be str\" ) self . apikey = apikey self . systemid = systemid self . donation_made = donation_made self . stats_period = stats_period def _headers ( self ) -> Dict [ str , str ]: \"\"\"Relevant documentation: https://pvoutput.org/help/api_specification.html#http-headers :return: headers for calls to the API :rtype: dict \"\"\" headers = { \"X-Pvoutput-Apikey\" : self . apikey , \"X-Pvoutput-SystemId\" : str ( self . systemid ), } return headers def get_time_by_base ( self ) -> str : \"\"\"rounds the current time to the base specified (ie, to 15 minutes or 5 minutes etc)\"\"\" now = datetime . now () hour = int ( now . strftime ( \"%H\" )) # round the minute to the current stats period minute = int ( round_to_base ( now . minute , self . stats_period )) return time ( hour = hour , minute = minute ) . strftime ( \"%H:%M\" ) @classmethod def _validate_format ( cls , format_string : AnyStr , key : str , value : Any , ) -> None : \"\"\"handles the regular expression format checks\"\"\" try : compiled = re . compile ( format_string ) match = compiled . match ( value ) if match is None : raise ValueError ( f \"key ' { key } ', with value ' { value } ' does not match ' { format_string !r} '\" ) except re . error as error : raise InvalidRegexpError ( \"Error for key ' {key} ' with format ' {format_string!r} ': {error} \" ) from error # pylint: disable=too-many-branches def validate_data ( self , data : Dict [ str , Any ], apiset : Dict [ str , Any ]) -> bool : \"\"\"Does a super-simple validation based on the api def raises errors if it's wrong, returns True if it's OK This'll only raise an error on the first error it finds :param data: the data to validate. :type data: dict :param apiset: A set of validation rules, eg: pvoutput.ADDSTATUS_PARAMETERS :type apiset: dict :raises TypeError: if the type testing fails. :raises ValueError: if you're trying to pass an invalid value. :raises pvoutput.InvalidRegexpError: if value does not match the regexp in format. \"\"\" # if you set a 'required_oneof' key in apiset, validation will require at least one of those keys to be set if \"required_oneof\" in apiset . keys () and ( len ([ key for key in data . keys () if key in apiset [ \"required_oneof\" ][ \"keys\" ]]) == 0 ): raise ValueError ( f \"one of { ',' . join ( apiset [ 'required_oneof' ][ 'keys' ]) } MUST be set\" ) for key in apiset . keys (): # check that that required values are set if apiset [ key ] . get ( \"required\" , False ) and key not in data . keys (): if \"default\" in apiset [ key ]: # set a default value data [ key ] = apiset [ key ][ \"default\" ] else : raise ValueError ( f \"key { key } required in data\" ) # check maxlen if \"maxlen\" in apiset [ key ] and key in data : if len ( data [ key ]) > apiset [ key ][ \"maxlen\" ]: raise ValueError ( f \"Value too long for key { key } { len ( data [ key ]) } > { apiset [ key ][ 'maxlen' ] } \" ) # check the value is in the set of valid choices if \"choices\" in apiset [ key ] and key in data : if data [ key ] not in apiset [ key ][ \"choices\" ]: raise ValueError ( f \"Invalid value for key { key } : ' { data [ key ] } ', should be in { apiset [ key ][ 'choices' ] } \" ) # check there's no extra fields in the data for key in data : if key not in apiset . keys (): raise ValueError ( f \"key { key } isn't valid in the API spec\" ) if apiset [ key ] . get ( \"type\" ) and not isinstance ( data [ key ], apiset [ key ][ \"type\" ] ): if data [ key ] is not None : raise TypeError ( f \"data[ { key } ] type ( { type ( data [ key ]) } is invalid - should be { str ( apiset [ key ][ 'type' ]) } )\" ) for key in data : if \"format\" in apiset [ key ]: self . _validate_format ( apiset [ key ][ \"format\" ], key , data [ key ]) # can run additional functions over the data if \"additional_validators\" in apiset [ key ]: for validator in apiset [ key ][ \"additional_validators\" ]: validator ( data [ key ]) # TODO: 'd' can't be more than 14 days ago, if a donator, goes out to 90 # check if donation_made == True and age of thing # if self.donation_made: # # check if more than 90 days ago # else: # # check if more than 14 days ago # check for donation-only keys if apiset [ key ] . get ( \"donation_required\" ) and not self . donation_made : raise DonationRequired ( f \"key { key } requires an account which has donated\" ) # check if you're outside max/min values if apiset [ key ] . get ( \"maxval\" ) and data . get ( key ) > apiset [ key ] . get ( \"maxval\" ): raise ValueError ( f \" { key } cannot be higher than { apiset [ key ][ 'maxval' ] } , is { data [ key ] } \" ) if apiset [ key ] . get ( \"minval\" ) and data . get ( key ) < apiset [ key ] . get ( \"minval\" ): raise ValueError ( f \" { key } cannot be lower than { apiset [ key ][ 'minval' ] } , is { data [ key ] } \" ) return True","title":"PVOutputBase"},{"location":"api/#pvoutput.base.PVOutputBase.get_time_by_base","text":"rounds the current time to the base specified (ie, to 15 minutes or 5 minutes etc) Source code in pvoutput/base.py def get_time_by_base ( self ) -> str : \"\"\"rounds the current time to the base specified (ie, to 15 minutes or 5 minutes etc)\"\"\" now = datetime . now () hour = int ( now . strftime ( \"%H\" )) # round the minute to the current stats period minute = int ( round_to_base ( now . minute , self . stats_period )) return time ( hour = hour , minute = minute ) . strftime ( \"%H:%M\" )","title":"get_time_by_base()"},{"location":"api/#pvoutput.base.PVOutputBase.validate_data","text":"Does a super-simple validation based on the api def raises errors if it's wrong, returns True if it's OK This'll only raise an error on the first error it finds :param data: the data to validate. :type data: dict :param apiset: A set of validation rules, eg: pvoutput.ADDSTATUS_PARAMETERS :type apiset: dict :raises TypeError: if the type testing fails. :raises ValueError: if you're trying to pass an invalid value. :raises pvoutput.InvalidRegexpError: if value does not match the regexp in format. Source code in pvoutput/base.py def validate_data ( self , data : Dict [ str , Any ], apiset : Dict [ str , Any ]) -> bool : \"\"\"Does a super-simple validation based on the api def raises errors if it's wrong, returns True if it's OK This'll only raise an error on the first error it finds :param data: the data to validate. :type data: dict :param apiset: A set of validation rules, eg: pvoutput.ADDSTATUS_PARAMETERS :type apiset: dict :raises TypeError: if the type testing fails. :raises ValueError: if you're trying to pass an invalid value. :raises pvoutput.InvalidRegexpError: if value does not match the regexp in format. \"\"\" # if you set a 'required_oneof' key in apiset, validation will require at least one of those keys to be set if \"required_oneof\" in apiset . keys () and ( len ([ key for key in data . keys () if key in apiset [ \"required_oneof\" ][ \"keys\" ]]) == 0 ): raise ValueError ( f \"one of { ',' . join ( apiset [ 'required_oneof' ][ 'keys' ]) } MUST be set\" ) for key in apiset . keys (): # check that that required values are set if apiset [ key ] . get ( \"required\" , False ) and key not in data . keys (): if \"default\" in apiset [ key ]: # set a default value data [ key ] = apiset [ key ][ \"default\" ] else : raise ValueError ( f \"key { key } required in data\" ) # check maxlen if \"maxlen\" in apiset [ key ] and key in data : if len ( data [ key ]) > apiset [ key ][ \"maxlen\" ]: raise ValueError ( f \"Value too long for key { key } { len ( data [ key ]) } > { apiset [ key ][ 'maxlen' ] } \" ) # check the value is in the set of valid choices if \"choices\" in apiset [ key ] and key in data : if data [ key ] not in apiset [ key ][ \"choices\" ]: raise ValueError ( f \"Invalid value for key { key } : ' { data [ key ] } ', should be in { apiset [ key ][ 'choices' ] } \" ) # check there's no extra fields in the data for key in data : if key not in apiset . keys (): raise ValueError ( f \"key { key } isn't valid in the API spec\" ) if apiset [ key ] . get ( \"type\" ) and not isinstance ( data [ key ], apiset [ key ][ \"type\" ] ): if data [ key ] is not None : raise TypeError ( f \"data[ { key } ] type ( { type ( data [ key ]) } is invalid - should be { str ( apiset [ key ][ 'type' ]) } )\" ) for key in data : if \"format\" in apiset [ key ]: self . _validate_format ( apiset [ key ][ \"format\" ], key , data [ key ]) # can run additional functions over the data if \"additional_validators\" in apiset [ key ]: for validator in apiset [ key ][ \"additional_validators\" ]: validator ( data [ key ]) # TODO: 'd' can't be more than 14 days ago, if a donator, goes out to 90 # check if donation_made == True and age of thing # if self.donation_made: # # check if more than 90 days ago # else: # # check if more than 14 days ago # check for donation-only keys if apiset [ key ] . get ( \"donation_required\" ) and not self . donation_made : raise DonationRequired ( f \"key { key } requires an account which has donated\" ) # check if you're outside max/min values if apiset [ key ] . get ( \"maxval\" ) and data . get ( key ) > apiset [ key ] . get ( \"maxval\" ): raise ValueError ( f \" { key } cannot be higher than { apiset [ key ][ 'maxval' ] } , is { data [ key ] } \" ) if apiset [ key ] . get ( \"minval\" ) and data . get ( key ) < apiset [ key ] . get ( \"minval\" ): raise ValueError ( f \" { key } cannot be lower than { apiset [ key ][ 'minval' ] } , is { data [ key ] } \" ) return True","title":"validate_data()"},{"location":"api/#pvoutput.base.round_to_base","text":"rounds down to a specific base number based on answer in https://stackoverflow.com/a/2272174/188774 Source code in pvoutput/base.py def round_to_base ( number : Union [ int , float ], base : Union [ int , float ]) -> float : \"\"\"rounds down to a specific base number based on answer in https://stackoverflow.com/a/2272174/188774 \"\"\" return base * round ( floor ( number / base ))","title":"round_to_base()"},{"location":"api/#pvoutput.exceptions","text":"Custom exceptions.","title":"exceptions"},{"location":"api/#pvoutput.exceptions.DonationRequired","text":"A custom exception for when you call a method that requires a donation-enabled account Source code in pvoutput/exceptions.py class DonationRequired ( Exception ): \"\"\"A custom exception for when you call a method that requires a donation-enabled account\"\"\"","title":"DonationRequired"},{"location":"api/#pvoutput.exceptions.InvalidRegexpError","text":"There was an error with the regexp format for this key Source code in pvoutput/exceptions.py class InvalidRegexpError ( Exception ): \"\"\"There was an error with the regexp format for this key\"\"\"","title":"InvalidRegexpError"},{"location":"api/#pvoutput.exceptions.UnknownAlertTypeError","text":"The provided Alert Type is not supported Source code in pvoutput/exceptions.py class UnknownAlertTypeError ( Exception ): \"\"\"The provided Alert Type is not supported\"\"\"","title":"UnknownAlertTypeError"},{"location":"api/#pvoutput.exceptions.UnknownMethodError","text":"The method is unknown. Source code in pvoutput/exceptions.py class UnknownMethodError ( Exception ): \"\"\"The method is unknown.\"\"\"","title":"UnknownMethodError"},{"location":"api/#pvoutput.parameters","text":"Standard parameter things.","title":"parameters"},{"location":"api/#pvoutput.parameters.ADDSTATUS_PARAMETERS","text":"Cumulative Energy The following values are valid for the c1 flag. 1 Both v1 and v3 values are lifetime energy values. Consumption and generation energy is reset to 0 at the start of the day. 2 Only v1 generation is a lifetime energy value. 3 Only v3 consumption is a lifetime energy value.","title":"ADDSTATUS_PARAMETERS"},{"location":"api/#pvoutput.utils","text":"Utilities","title":"utils"},{"location":"api/#pvoutput.utils.get_rate_limit_header","text":"gets the rate limit header from the returned headers Source code in pvoutput/utils.py def get_rate_limit_header ( response_object : Any ) -> Dict [ str , str ]: \"\"\"gets the rate limit header from the returned headers\"\"\" retval = {} for key in response_object . headers . keys (): if key . startswith ( \"X-Rate-Limit\" ): retval [ key ] = str ( response_object . headers [ key ]) return retval","title":"get_rate_limit_header()"},{"location":"api/#pvoutput.utils.responsedata_to_response","text":"Turns the status output into a dict Source code in pvoutput/utils.py def responsedata_to_response ( input_data : List [ str ]) -> Tuple [ Dict [ str , Any ], List [ str ]]: \"\"\"Turns the status output into a dict\"\"\" # pylint: disable=invalid-name d , t , v1 , v2 , v3 , v4 , v5 , v6 , normalised_output , * extras = input_data # if there's no data, you get \"NaN\". Here we change that to NoneType responsedata = { \"d\" : d , \"t\" : t , \"timestamp\" : datetime . strptime ( f \" { d } { t } \" , \"%Y%m %d %H:%M\" ), \"v1\" : None if v1 == \"NaN\" else float ( v1 ), \"v2\" : None if v2 == \"NaN\" else float ( v2 ), \"v3\" : None if v3 == \"NaN\" else float ( v3 ), \"v4\" : None if v4 == \"NaN\" else float ( v4 ), \"v5\" : None if v5 == \"NaN\" else float ( v5 ), \"v6\" : None if v6 == \"NaN\" else float ( v6 ), \"normalised_output\" : float ( normalised_output ), } return responsedata , extras","title":"responsedata_to_response()"},{"location":"api/#pvoutput.utils.validate_delete_status_date","text":"runs the validation for the date_val option of delete_status Source code in pvoutput/utils.py def validate_delete_status_date ( date_val : date ) -> None : \"\"\"runs the validation for the date_val option of delete_status\"\"\" yesterday = date . today () - timedelta ( days = 1 ) tomorrow = date . today () + timedelta ( days = 1 ) # you can't delete back past yesterday if date_val < yesterday : raise ValueError ( f \"date_val can only be yesterday or today, you provided { date_val } \" ) # you can't delete forward of today if date_val >= tomorrow : raise ValueError ( f \"date_val can only be yesterday or today, you provided { date_val } \" )","title":"validate_delete_status_date()"}]}